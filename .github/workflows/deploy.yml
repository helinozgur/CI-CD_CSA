name: Flask CI/CD Pipeline

on:
  push:
    branches:
      - main  # Sadece 'main' dalına yapılan değişikliklerde tetiklenir

jobs:
  deploy:
    runs-on: ubuntu-latest  # Workflow'un çalışacağı makine

    steps:
    # 1. Test SSH_PRIVATE_KEY Secret'ını
    - name: Test SSH_PRIVATE_KEY
      run: |
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "Error: SSH_PRIVATE_KEY is not set or empty"
          exit 1
        else
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          key_length=$(wc -c < /tmp/ssh_key)  # Anahtar uzunluğunu hesapla
          echo "SSH_PRIVATE_KEY is set and has length: $key_length"
        fi

    # 2. Kodu GitHub Actions'a alın
    - name: Checkout code
      uses: actions/checkout@v3

    # 3. SSH Anahtarını Ayarla
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        cat <<EOF > ~/.ssh/id_rsa
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        chmod 600 ~/.ssh/id_rsa

    # 4. Sunucuya Flask Kodlarını Kopyala
    - name: Copy files to server
      run: |
        ssh -i ~/.ssh/id_rsa pam_golive@10.36.5.44 "mkdir -p ~/flask_app"
        scp -i ~/.ssh/id_rsa -r ./* pam_golive@10.36.5.44:~/flask_app

    # 5. Sunucuda Flask Bağımlılıklarını Yükle
    - name: Install Flask dependencies
      run: |
        ssh -i ~/.ssh/id_rsa pam_golive@10.36.5.44 << 'EOF'
          sudo apt update
          sudo apt install -y python3 python3-pip
          cd ~/flask_app
          if [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          fi
        EOF

    # 6. Flask Uygulamasını Yeniden Başlat
    - name: Restart Flask App
      run: |
        ssh -i ~/.ssh/id_rsa pam_golive@10.36.5.44 << 'EOF'
          cd ~/flask_app
          # Eğer varsa mevcut Flask sürecini durdur
          pkill -f "python3 app.py" || true
          # Flask uygulamasını arka planda başlat
          nohup python3 app.py > flask.log 2>&1 &
        EOF
